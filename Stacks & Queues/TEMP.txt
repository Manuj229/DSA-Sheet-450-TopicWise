#include<bits/stdc++.h>
using namespace std;
//Implementing K stacks in an array
/*struct kstacks
{
    int *arr;
    int *top;
    int *next;
    int freetop;
    int cap, k;
    kstacks(int k1, int n)
    {
        k = k1;
        cap = n;
        arr = new int [cap];
        top = new int [k];
        next = new int [cap];

        for(int i=0;i<k;i++)
            top[i] = -1;

        freetop = 0;
        for(int i=0;i<cap;i++)
            next[i] = i+1;

        next[cap-1] = -1;
    }

    bool isfull()
    {
        return freetop == -1;
    }

    bool isempty(int sn)
    {
        return top[sn] == -1;
    }

    void push(int x, int sn)
    {
        if(isfull())
        {
            cout<<"Stack overflow"<<endl;
            return;
        }
        int i = freetop;
        freetop = next[i];
        next[i] = top[sn];
        top[sn] = i;
        arr[i] = x;
    }

    int pop(int sn)
    {
        if(isempty(sn))
        {
            cout<<"Stack underflow"<<endl;
            return INT_MAX;
        }
        int i = top[sn];
        top[sn] = next[i];
        next[i] = freetop;
        freetop = i;
        return arr[i];
    }
};

int main()
{
    int k = 3,   n = 10;
    kstacks ks(k, n);
    ks.push(5,0);
    ks.push(6,1);
    ks.push(7,2);
    ks.push(10,0);
    ks.push(11,0);
    ks.push(12,0);
    ks.push(13,1);

    cout<<ks.pop(1)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(1)<<endl;
    cout<<ks.pop(1)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(0)<<endl;

}
*/
#include<bits/stdc++.h>
using namespace std;

/*void printSpan(int arr[], int n)
{
    stack<int> s;
    s.push(0);
    cout<<1<<" ";
    for(int i=1;i<n;i++)
    {
        while(s.empty()== false && arr[s.top()]<=arr[i])
            s.pop();
        int span = s.empty()?i+1:i-s.top();
        cout<<span<<" ";
        s.push(i);
    }
}*/

/*void previousgreater(int arr[], int n)
{
    stack<int> s;
    s.push(arr[0]);
    cout<< -1<<" ";
    for(int i=1;i<n;i++)
    {
        while(s.empty()==false && s.top()<=arr[i])
            s.pop();
        int pg = s.empty()?-1:s.top();
        cout<<pg<<" ";
        s.push(arr[i]);
    }
}
void nextgreater(int arr[], int n)
{
    //this function prints the reverse order. kindly store the values in stack and then revert the vector.
    stack<int> s;
    s.push(arr[n-1]);
    cout<<-1<<" ";
    for(int i=n-2;i>=0;i--)
    {
        while(s.empty()==false && s.top()<=arr[i])
            s.pop();
        int ng = s.empty()?-1:s.top();
        cout<<ng<<" ";
        s.push(arr[i]);
    }
}
class DLLNode
{
    public:
    DLLNode *prev;
    int data;
    DLLNode *next;
};
class myStack
{
    public:
    DLLNode *head;
    DLLNode *mid;
    int count;
};
myStack *createMyStack()
{
    myStack *ms = new myStack();
    ms->count = 0;
    return ms;
};
void push(myStack *ms, int new_data)
{
    DLLNode* new_DLLNode = new DLLNode();
    new_DLLNode->data = new_data;
    new_DLLNode->prev = NULL;
    new_DLLNode->next = ms->head;
    ms->count += 1;

    if(ms->count==1)
        ms->mid = new_DLLNode;
    else
    {
        ms->head->prev = new_DLLNode;
        if(!(ms->count & 1))
            ms->mid = ms->mid->prev;
    }
    ms->head = new_DLLNode;
}
int pop(myStack *ms)
{
    if (ms->count == 0)
    {
        cout<<"Stack is empty\n";
        return -1;
    }
    DLLNode *head = ms->head;
    int item = head->data;
    ms->head = head->next;
    if (ms->head != NULL)
        ms->head->prev = NULL;

    ms->count -= 1;
    if ((ms->count) & 1 )
        ms->mid = ms->mid->next;

    free(head);

    return item;
}
int findMiddle(myStack *ms)
{
    if (ms->count == 0)
    {
        cout << "Stack is empty now\n";
        return -1;
    }

    return ms->mid->data;
}
int main()
{
    myStack *ms = createMyStack();
    push(ms, 11);
    push(ms, 22);
    push(ms, 33);
    push(ms, 44);
    push(ms, 55);
    push(ms, 66);
    push(ms, 77);

    cout << "Item popped is " << pop(ms) << endl;
    cout << "Item popped is " << pop(ms) << endl;
    cout << "Middle Element is " << findMiddle(ms) << endl;
    return 0;
}*/

void deleteMid(stack<int>&s, int sizeOfStack)
{
    // code here
    stack<int> s1;
    int i = 0;
    while(s.empty()==false)
    {
        if(i == ceil(sizeOfStack/2))
        {
            s.pop();
            i++;
        }
        else
        {
            s1.push(s.top());
            s.pop();
            i++;
        }
    }
    while(s1.empty()==false)
    {
        s.push(s1.top());
        s1.pop();
    }

}
int main()
{
    stack<int> s;
    s.push(5);
    s.push(4);
    s.push(3);
    s.push(2);
    s.push(1);
    int stacksize = 5;

    deleteMid(s, stacksize);
    while(s.empty()==false)
    {
        cout<<s.top()<<" ";
        s.pop();
    }

}



