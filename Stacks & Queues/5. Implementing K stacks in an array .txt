#include<bits/stdc++.h>
using namespace std;
//Implementing K stacks in an array
struct kstacks
{
    int *arr;
    int *top;
    int *next;
    int freetop;
    int cap, k;
    kstacks(int k1, int n)
    {
        k = k1;
        cap = n;
        arr = new int [cap];
        top = new int [k];
        next = new int [cap];

        for(int i=0;i<k;i++)
            top[i] = -1;

        freetop = 0;
        for(int i=0;i<cap;i++)
            next[i] = i+1;

        next[cap-1] = -1;
    }

    bool isfull()
    {
        return freetop == -1;
    }

    bool isempty(int sn)
    {
        return top[sn] == -1;
    }

    void push(int x, int sn)
    {
        if(isfull())
        {
            cout<<"Stack overflow"<<endl;
            return;
        }
        int i = freetop;
        freetop = next[i];
        next[i] = top[sn];
        top[sn] = i;
        arr[i] = x;
    }

    int pop(int sn)
    {
        if(isempty(sn))
        {
            cout<<"Stack underflow"<<endl;
            return INT_MAX;
        }
        int i = top[sn];
        top[sn] = next[i];
        next[i] = freetop;
        freetop = i;
        return arr[i];
    }
};

int main()
{
    int k = 3,   n = 10;
    kstacks ks(k, n);
    ks.push(5,0);
    ks.push(6,1);
    ks.push(7,2);
    ks.push(10,0);
    ks.push(11,0);
    ks.push(12,0);
    ks.push(13,1);

    cout<<ks.pop(1)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(1)<<endl;
    cout<<ks.pop(1)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(0)<<endl;
    cout<<ks.pop(0)<<endl;

}